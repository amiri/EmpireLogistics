INSTALLATION

These instructions will change as we build the data and the server.

Because we have not yet begun to script the deployment, you need to
handle the prereqs yourself. Assuming you are running some sort of
Debian, e.g., Ubuntu, you need to install:

    postgresql
    postgis-scripts
    gdal
    node
    npm

So you should do something like

    sudo apt-get install postgresql postgis-scripts gdal node npm

Then you need to run the following two commands:

    npm install -g topojson
    make all

Now you should have a mostly populated PostgreSQL database with
a lot of data in place.

We have all the rail and port data importing now. Remaining are:

    - warehouses
    - original data

The "all" target in the Makefile does all the hard work. It imports
and populates all the data, and it will overwrite existing data if
you run it again. This is dangerous in production, of course,
but it's OK for the moment.

OVERVIEW

We have four major data layers we want:

    - rail
    - ports
    - warehouses
    - roads/highways

And we want them in North America:

    - USA
    - Mexico
    - Canada

North American port data comes from:

    - http://msi.nga.mil/MSISiteContent/StaticFiles/NAV_PUBS/WPI/WPI_Shapefile.zip

North American rail data comes from:

    - http://cta.ornl.gov/transnet/qc28R.zip
    - http://cta.ornl.gov/transnet/qn28V.zip
    - http://cta.ornl.gov/transnet/wconv.txt
    - http://cta.ornl.gov/transnet/QNdata.zip

North American warehouse data is currently restricted only to Target and Walmart
distribution centers, and it comes from:

    - http://www.mwpvl.com/html/walmart.html
    - https://corporate.target.com/_ui/js/main.comb.xml

The shapefiles are imported directly into a PostGIS-enabled
database. Other data sources are imported into the same database
after being prepared/mangled/reformatted. Once all the data is in
the database, we make new tables in that database by joining and
selecting from the raw data tables. This produces the set of tables
that our application, finally, consumes.

The visualization will be done in d3 or leaflet using GeoJSON to render
each layer.
