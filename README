INSTALLATION

These instructions will change as we build the data and the server.

If you are running a Debian-derived distribution, preferably Ubuntu 13.10,
Saucy Salamander, you can run the following on the command line:

    make prereqs
    make all

The "all" target in the Makefile does all the hard work. It configures
the server, imports and populates all the data, and it will overwrite
existing data if you run it again. This is dangerous in production, of
course, but it's OK for the moment.

If you want to break it down, you can build the parts individually:

    make prereqs
    make chef
    make database

Now you should have a mostly populated PostgreSQL database with
a lot of data in place. You also have nginx, PostgreSQL, and uwsgi
installed, but unconfigured.

We have all the rail, warehouse, and port data importing now. Remaining
is original data from the current site.

OVERVIEW

We have four major data layers we want:

    - rail
    - ports
    - warehouses
    - roads/highways

And we want them in North America:

    - USA
    - Mexico
    - Canada

North American port data comes from:

    - http://msi.nga.mil/MSISiteContent/StaticFiles/NAV_PUBS/WPI/WPI_Shapefile.zip

North American rail data comes from:

    - http://cta.ornl.gov/transnet/qc28R.zip
    - http://cta.ornl.gov/transnet/qn28V.zip
    - http://cta.ornl.gov/transnet/wconv.txt
    - http://cta.ornl.gov/transnet/QNdata.zip

North American warehouse data comes from:

    - http://www.mwpvl.com/html/walmart.html
    - https://corporate.target.com/_ui/js/main.comb.xml
    - a lot of legwork and research for Costco, Amazon,
      Home Depot, Ikea, Krogers, and Walgreens.

The shapefiles are imported directly into a PostGIS-enabled
database. Other data sources are imported into the same database
after being prepared/mangled/reformatted. Once all the data is in
the database, we make new tables in that database by joining and
selecting from the raw data tables. This produces the set of tables
that our application, finally, consumes.

The visualization of each layer is a separate Leaflet TileLayer,
rendered by d3, which is faster than Leaflet options now.

ARCHITECTURE

We run two uwsgi app servers behind nginx:

    - TileStache (http://tilestache.org/)
        uwsgi serves a TileStache app for the vector tiles.
    - EmpireLogistics
        uwsgi serves a PSGI app for the main application.

The database server is PostgreSQL 9.3 with PostGIS extensions.

We cache vector tiles on disk, where they are served
directly, speedily, from nginx.
